import React, { useRef, useState, useEffect } from 'react';
import { StyleSheet, View, ScrollView, Image, TouchableOpacity, Dimensions, Animated, StatusBar, RefreshControl } from 'react-native';
import { Card, Title, Paragraph, Text, useTheme, Button, Chip, Divider, Avatar, Badge } from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import { FlatList } from 'react-native-gesture-handler';
import { LinearGradient } from 'expo-linear-gradient';

// Mock data for carousel
const carouselData = [
  {
    id: '1',
    title: 'LIVE: Finals Match',
    subtitle: 'Maple Leafs vs Bruins',
    imageUrl: 'https://via.placeholder.com/300x150/0066CC/FFFFFF?text=Live+Match',
    type: 'match'
  },
  {
    id: '2',
    title: 'Tournament Registration',
    subtitle: 'Deadline: May 15, 2025',
    imageUrl: 'https://via.placeholder.com/300x150/FF6600/FFFFFF?text=Tournament+Registration',
    type: 'registration'
  },
  {
    id: '3',
    title: 'Latest Hockey News',
    subtitle: 'Season highlights and player interviews',
    imageUrl: 'https://via.placeholder.com/300x150/00A651/FFFFFF?text=Hockey+News',
    type: 'news'
  }
];

// Mock data for quick access tiles
const quickAccessData = [
  {
    id: '1',
    title: 'Tournaments',
    icon: 'trophy',
    color: '#FF6600'
  },
  {
    id: '2',
    title: 'News',
    icon: 'newspaper',
    color: '#0066CC'
  },
  {
    id: '3',
    title: 'Teams',
    icon: 'account-group',
    color: '#00A651'
  },
  {
    id: '4',
    title: 'Tickets',
    icon: 'ticket',
    color: '#9C27B0'
  },
  {
    id: '5',
    title: 'League',
    icon: 'medal',
    color: '#FF9800'
  },
  {
    id: '6',
    title: 'Register',
    icon: 'account-plus',
    color: '#2196F3'
  }
];

// Mock data for news
const newsData = [
  {
    id: '1',
    title: 'Player of the Month Announced',
    snippet: 'Connor McDavid wins Player of the Month for the third consecutive time this season.',
    imageUrl: 'https://via.placeholder.com/80x80/0066CC/FFFFFF?text=News+1',
    date: 'May 10, 2025'
  },
  {
    id: '2',
    title: 'New Training Facility Opening',
    snippet: 'State-of-the-art training facility to open next month with advanced technologies.',
    imageUrl: 'https://via.placeholder.com/80x80/FF6600/FFFFFF?text=News+2',
    date: 'May 8, 2025'
  },
  {
    id: '3',
    title: 'Youth Hockey Program Expands',
    snippet: 'Local youth hockey program to add three new age groups starting this fall.',
    imageUrl: 'https://via.placeholder.com/80x80/00A651/FFFFFF?text=News+3',
    date: 'May 5, 2025'
  }
];

const HomeScreen = ({ navigation }) => {
  const theme = useTheme();
  const { width } = Dimensions.get('window');
  const scrollX = useRef(new Animated.Value(0)).current;
  const [activeIndex, setActiveIndex] = useState(0);
  const flatListRef = useRef(null);
  const [refreshing, setRefreshing] = useState(false);
  const scrollY = useRef(new Animated.Value(0)).current;
  
  // Animation values for staggered animations
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const translateY = useRef(new Animated.Value(30)).current;
  
  // Handle refresh
  const onRefresh = () => {
    setRefreshing(true);
    // Simulate data fetching
    setTimeout(() => {
      setRefreshing(false);
    }, 1500);
  };
  
  // Run entrance animations when component mounts
  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      Animated.timing(translateY, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      })
    ]).start();
  }, []);
  
  // Auto-scroll carousel
  useEffect(() => {
    const timer = setInterval(() => {
      if (flatListRef.current) {
        const nextIndex = (activeIndex + 1) % carouselData.length;
        flatListRef.current.scrollToIndex({
          index: nextIndex,
          animated: true
        });
        setActiveIndex(nextIndex);
      }
    }, 5000);
    
    return () => clearInterval(timer);
  }, [activeIndex]);

  // Handle scroll event for carousel
  const handleScroll = Animated.event(
    [{ nativeEvent: { contentOffset: { x: scrollX } } }],
    { useNativeDriver: false }
  );
  
  // Handle main scroll event for parallax effects
  const handleMainScroll = Animated.event(
    [{ nativeEvent: { contentOffset: { y: scrollY } } }],
    { useNativeDriver: false }
  );

  // Render carousel item with animations
  const renderCarouselItem = ({ item, index }: { item: any, index: number }) => {
    const inputRange = [
      (index - 1) * width,
      index * width,
      (index + 1) * width
    ];
    
    const scale = scrollX.interpolate({
      inputRange,
      outputRange: [0.92, 1, 0.92],
      extrapolate: 'clamp'
    });
    
    const opacity = scrollX.interpolate({
      inputRange,
      outputRange: [0.7, 1, 0.7],
      extrapolate: 'clamp'
    });
    
    const translateX = scrollX.interpolate({
      inputRange,
      outputRange: [width * 0.05, 0, -width * 0.05],
      extrapolate: 'clamp'
    });
    
    // Define badge color based on item type
    const badgeColor = item.type === 'match' ? '#FF3B30' : 
                      item.type === 'registration' ? '#FF6600' : 
                      '#00A651';
    
    return (
      <Animated.View 
        style={[
          styles.carouselItem, 
          { 
            transform: [{ scale }, { translateX }],
            opacity 
          }
        ]}
      >
        <Card style={styles.carouselCard}>
          <Image
            source={{ uri: item.imageUrl }}
            style={styles.carouselImage}
            resizeMode="cover"
          />
          
          {/* Badge for item type */}
          <View style={[styles.badge, { backgroundColor: badgeColor }]}>
            <Text style={styles.badgeText}>
              {item.type === 'match' ? 'LIVE' : 
               item.type === 'registration' ? 'REGISTER' : 'NEWS'}
            </Text>
          </View>
          
          {/* Gradient overlay for better text visibility */}
          <LinearGradient
            colors={['transparent', 'rgba(0,0,0,0.7)', 'rgba(0,0,0,0.8)']}
            style={styles.carouselGradient}
          >
            <View style={styles.carouselContent}>
              <Title style={styles.carouselTitle}>{item.title}</Title>
              <Paragraph style={styles.carouselSubtitle}>{item.subtitle}</Paragraph>
              
              {/* Action button */}
              <TouchableOpacity 
                style={styles.carouselButton}
                onPress={() => navigation.navigate(item.type === 'match' ? 'LiveMatch' : 
                                               item.type === 'registration' ? 'Registration' : 'News')}
              >
                <Text style={styles.carouselButtonText}>
                  {item.type === 'match' ? 'Watch Now' : 
                   item.type === 'registration' ? 'Register' : 'Read More'}
                </Text>
                <Icon name="chevron-right" size={16} color="white" style={{ marginLeft: 4 }} />
              </TouchableOpacity>
            </View>
          </LinearGradient>
        </Card>
      </Animated.View>
    );
  };

  // Render quick access tile with animation
  const renderQuickAccessTile = ({ item, index }: { item: any, index: number }) => {
    // Calculate staggered animation delay based on index
    const tileAnimDelay = index * 100;
    const tileScale = useRef(new Animated.Value(0.8)).current;
    const tileOpacity = useRef(new Animated.Value(0)).current;
    
    useEffect(() => {
      // Start animation with delay based on index for staggered effect
      Animated.parallel([
        Animated.timing(tileScale, {
          toValue: 1,
          duration: 400,
          delay: tileAnimDelay,
          useNativeDriver: true
        }),
        Animated.timing(tileOpacity, {
          toValue: 1,
          duration: 400,
          delay: tileAnimDelay,
          useNativeDriver: true
        })
      ]).start();
    }, []);
    
    return (
      <Animated.View
        style={{
          opacity: tileOpacity,
          transform: [{ scale: tileScale }]
        }}
      >
        <TouchableOpacity 
          style={styles.quickAccessTile}
          onPress={() => navigation.navigate(item.title)}
          activeOpacity={0.7}
        >
          <View style={[styles.iconContainer, { backgroundColor: item.color }]}>
            <Icon name={item.icon} size={26} color="white" />
          </View>
          <Text style={styles.tileTitle}>{item.title}</Text>
        </TouchableOpacity>
      </Animated.View>
    );
  };

  // Create animation values for news items - one for each news item
  const newsAnimValues = newsData.map(() => ({
    scale: useRef(new Animated.Value(0.9)).current,
    opacity: useRef(new Animated.Value(0)).current
  }));
  
  // Start news animations
  useEffect(() => {
    // Stagger the animations
    newsData.forEach((_, index: number) => {
      Animated.parallel([
        Animated.timing(newsAnimValues[index].opacity, {
          toValue: 1,
          duration: 500,
          delay: index * 100,
          useNativeDriver: true
        }),
        Animated.timing(newsAnimValues[index].scale, {
          toValue: 1,
          duration: 500,
          delay: index * 100,
          useNativeDriver: true
        })
      ]).start();
    });
  }, []);
  
  // Render news item with animation
  const renderNewsItem = ({ item, index }: { item: any, index: number }) => {
    const { scale, opacity } = newsAnimValues[index];
    
    return (
      <Animated.View 
        style={{
          opacity, 
          transform: [{ scale }],
          marginBottom: 16
        }}
      >
        <Card style={styles.newsCard}>
          <View style={styles.newsCardContent}>
            <Image
              source={{ uri: item.imageUrl }}
              style={styles.newsImage}
              resizeMode="cover"
            />
            <View style={styles.newsTextContainer}>
              <View>
                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 4 }}>
                  <Icon name="clock-outline" size={12} color="#0066CC" style={{ marginRight: 4 }} />
                  <Text style={styles.newsDate}>{item.date}</Text>
                </View>
                <Title style={styles.newsTitle}>{item.title}</Title>
                <Paragraph style={styles.newsSnippet}>{item.snippet}</Paragraph>
              </View>
              <TouchableOpacity 
                style={styles.readMoreButton}
                onPress={() => navigation.navigate('NewsDetail', { newsId: item.id })}
                activeOpacity={0.7}
              >
                <Text style={styles.readMore}>Read More</Text>
                <Icon name="arrow-right" size={14} color="#0066CC" style={{ marginLeft: 4 }} />
              </TouchableOpacity>
            </View>
          </View>
        </Card>
      </Animated.View>
    );
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar barStyle="dark-content" backgroundColor="transparent" translucent />
      <View style={styles.container}>
        {/* Animated Header */}
        <Animated.View 
          style={[
            styles.header,
            {
              opacity: fadeAnim,
              transform: [{ translateY: scrollY.interpolate({
                inputRange: [0, 100],
                outputRange: [0, -10],
                extrapolate: 'clamp'
              })}]
            }
          ]}
        >
          <View style={styles.headerContent}>
            <View>
              <Text style={styles.appBarTitle}>Hockey Tribe</Text>
              <Text style={styles.appBarSubtitle}>Welcome back, Player</Text>
            </View>
            <View style={styles.headerActions}>
              <TouchableOpacity style={styles.iconButton}>
                <Badge visible={true} size={8} style={{ position: 'absolute', top: 10, right: 10 }} />
                <Icon name="bell-outline" size={22} color="#333333" />
              </TouchableOpacity>
              <TouchableOpacity style={styles.iconButton}>
                <Icon name="account-circle-outline" size={22} color="#333333" />
              </TouchableOpacity>
            </View>
          </View>
        </Animated.View>
        
        {/* Main Content */}
        <Animated.ScrollView 
          style={styles.scrollView}
          showsVerticalScrollIndicator={false}
          onScroll={handleMainScroll}
          scrollEventThrottle={16}
          refreshControl={
            <RefreshControl
              refreshing={refreshing}
              onRefresh={onRefresh}
              colors={['#0066CC']}
              tintColor={'#0066CC'}
            />
          }
        >
          {/* Welcome Card */}
          <Animated.View style={{
            opacity: fadeAnim,
            transform: [{ translateY }],
            marginHorizontal: 16,
            marginTop: 16,
            marginBottom: 8
          }}>
            <Card style={styles.welcomeCard}>
              <LinearGradient
                colors={['#0066CC', '#004999']}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 0 }}
                style={styles.welcomeGradient}
              >
                <View style={styles.welcomeContent}>
                  <View>
                    <Text style={styles.welcomeTitle}>Today's Match</Text>
                    <Text style={styles.welcomeSubtitle}>Maple Leafs vs Bruins</Text>
                    <Text style={styles.welcomeTime}>7:30 PM EST</Text>
                  </View>
                  <TouchableOpacity style={styles.welcomeButton}>
                    <Text style={styles.welcomeButtonText}>View Details</Text>
                  </TouchableOpacity>
                </View>
              </LinearGradient>
            </Card>
          </Animated.View>
          
          {/* Carousel */}
          <Animated.View 
            style={[
              styles.carouselContainer,
              { 
                opacity: fadeAnim,
                transform: [{ translateY }]
              }
            ]}
          >
            <FlatList
              ref={flatListRef}
              data={carouselData}
              renderItem={renderCarouselItem}
              keyExtractor={item => item.id}
              horizontal
              pagingEnabled
              showsHorizontalScrollIndicator={false}
              onScroll={handleScroll}
              scrollEventThrottle={16}
            />
            
            {/* Pagination dots */}
            <View style={styles.paginationContainer}>
              {carouselData.map((_, index) => {
                const inputRange = [
                  (index - 1) * width,
                  index * width,
                  (index + 1) * width
                ];
                
                const dotWidth = scrollX.interpolate({
                  inputRange,
                  outputRange: [8, 16, 8],
                  extrapolate: 'clamp'
                });
                
                const opacity = scrollX.interpolate({
                  inputRange,
                  outputRange: [0.3, 1, 0.3],
                  extrapolate: 'clamp'
                });
                
                return (
                  <Animated.View
                    key={index}
                    style={[styles.dot, { width: dotWidth, opacity }]}
                  />
                );
              })}
            </View>
          </Animated.View>
          
          {/* Quick Access Section */}
          <Animated.View 
            style={[
              styles.sectionContainer,
              { 
                opacity: fadeAnim,
                transform: [{ translateY }]
              }
            ]}
          >
            <View style={styles.sectionTitleContainer}>
              <Text style={styles.sectionTitle}>Quick Access</Text>
              <TouchableOpacity>
                <Text style={styles.seeAllText}>See All</Text>
              </TouchableOpacity>
            </View>
            <ScrollView 
              horizontal 
              showsHorizontalScrollIndicator={false}
              contentContainerStyle={{ paddingLeft: 16 }}
            >
              {quickAccessData.map((item, index) => renderQuickAccessTile({ item, index }))}
            </ScrollView>
          </Animated.View>
          
          {/* News Section */}
          <Animated.View 
            style={[
              styles.newsSection,
              { 
                opacity: fadeAnim,
                transform: [{ translateY }]
              }
            ]}
          >
            <View style={styles.sectionTitleContainer}>
              <Text style={styles.sectionTitle}>Latest News</Text>
              <TouchableOpacity>
                <Text style={styles.seeAllText}>See All</Text>
              </TouchableOpacity>
            </View>
            {newsData.map((item, index) => renderNewsItem({ item, index }))}
          </Animated.View>
          
          {/* Upcoming Events Section */}
          <Animated.View 
            style={[
              styles.sectionContainer,
              { 
                opacity: fadeAnim,
                transform: [{ translateY }],
                paddingBottom: 30
              }
            ]}
          >
            <View style={styles.sectionTitleContainer}>
              <Text style={styles.sectionTitle}>Upcoming Events</Text>
              <TouchableOpacity>
                <Text style={styles.seeAllText}>See All</Text>
              </TouchableOpacity>
            </View>
            <Card style={styles.eventCard}>
              <View style={styles.eventDateContainer}>
                <Text style={styles.eventMonth}>MAY</Text>
                <Text style={styles.eventDay}>15</Text>
              </View>
              <View style={styles.eventDetails}>
                <Text style={styles.eventTitle}>Youth Hockey Tournament</Text>
                <View style={styles.eventInfo}>
                  <Icon name="map-marker" size={14} color="#0066CC" style={{ marginRight: 4 }} />
                  <Text style={styles.eventLocation}>City Arena, Downtown</Text>
                </View>
                <View style={styles.eventInfo}>
                  <Icon name="clock-outline" size={14} color="#0066CC" style={{ marginRight: 4 }} />
                  <Text style={styles.eventTime}>9:00 AM - 4:00 PM</Text>
                </View>
                <Chip 
                  style={styles.eventStatusChip} 
                  textStyle={styles.eventStatusText}
                >
                  Registration Open
                </Chip>
              </View>
            </Card>
          </Animated.View>
        </Animated.ScrollView>
      </View>
    </SafeAreaView>
  );
};
  
  // Animation values for staggered animations
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const translateY = useRef(new Animated.Value(30)).current;
  
  // Handle refresh
  const onRefresh = () => {
    setRefreshing(true);
    // Simulate data fetching
    setTimeout(() => {
      setRefreshing(false);
    }, 1500);
  };
  
  // Run entrance animations when component mounts
  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      Animated.timing(translateY, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      })
    ]).start();
  }, []);
  
  // Auto-scroll carousel
  useEffect(() => {
    const timer = setInterval(() => {
      if (flatListRef.current) {
        const nextIndex = (activeIndex + 1) % carouselData.length;
        flatListRef.current.scrollToIndex({
          index: nextIndex,
          animated: true
        });
        setActiveIndex(nextIndex);
      }
    }, 5000);
    
    return () => clearInterval(timer);
  }, [activeIndex]);

  // Handle scroll event for carousel
  const handleScroll = Animated.event(
    [{ nativeEvent: { contentOffset: { x: scrollX } } }],
    { useNativeDriver: false }
  );
  
  // Handle main scroll event for parallax effects
  const handleMainScroll = Animated.event(
    [{ nativeEvent: { contentOffset: { y: scrollY } } }],
    { useNativeDriver: false }
  );

  // Render carousel item with animations
  const renderCarouselItem = ({ item, index }: { item: any, index: number }) => {
    const inputRange = [
      (index - 1) * width,
      index * width,
      (index + 1) * width
    ];
    
    const scale = scrollX.interpolate({
      inputRange,
      outputRange: [0.92, 1, 0.92],
      extrapolate: 'clamp'
    });
    
    const opacity = scrollX.interpolate({
      inputRange,
      outputRange: [0.7, 1, 0.7],
      extrapolate: 'clamp'
    });
    
    const translateX = scrollX.interpolate({
      inputRange,
      outputRange: [width * 0.05, 0, -width * 0.05],
      extrapolate: 'clamp'
    });
    
    // Define badge color based on item type
    const badgeColor = item.type === 'match' ? '#FF3B30' : 
                      item.type === 'registration' ? theme.colors.secondary : 
                      theme.colors.accent;
    
    return (
      <Animated.View 
        style={[
          styles.carouselItem, 
          { 
            transform: [{ scale }, { translateX }],
            opacity 
          }
        ]}
      >
        <Card style={styles.carouselCard}>
          <Image
            source={{ uri: item.imageUrl }}
            style={styles.carouselImage}
            resizeMode="cover"
          />
          
          {/* Badge for item type */}
          <View style={[styles.badge, { backgroundColor: badgeColor }]}>
            <Text style={styles.badgeText}>
              {item.type === 'match' ? 'LIVE' : 
               item.type === 'registration' ? 'REGISTER' : 'NEWS'}
            </Text>
          </View>
          
          {/* Gradient overlay for better text visibility */}
          <LinearGradient
            colors={['transparent', 'rgba(0,0,0,0.7)', 'rgba(0,0,0,0.8)']}
            style={styles.carouselGradient}
          >
            <View style={styles.carouselContent}>
              <Title style={styles.carouselTitle}>{item.title}</Title>
              <Paragraph style={styles.carouselSubtitle}>{item.subtitle}</Paragraph>
              
              {/* Action button */}
              <TouchableOpacity 
                style={styles.carouselButton}
                onPress={() => navigation.navigate(item.type === 'match' ? 'LiveMatch' : 
                                               item.type === 'registration' ? 'Registration' : 'News')}
              >
                <Text style={styles.carouselButtonText}>
                  {item.type === 'match' ? 'Watch Now' : 
                   item.type === 'registration' ? 'Register' : 'Read More'}
                </Text>
                <Icon name="chevron-right" size={16} color="white" style={{ marginLeft: 4 }} />
              </TouchableOpacity>
            </View>
          </LinearGradient>
        </Card>
      </Animated.View>
    );
  };

  // Render quick access tile with animation
  const renderQuickAccessTile = ({ item, index }: { item: any, index: number }) => {
    // Calculate staggered animation delay based on index
    const tileAnimDelay = index * 100;
    const tileScale = useRef(new Animated.Value(0.8)).current;
    const tileOpacity = useRef(new Animated.Value(0)).current;
    
    useEffect(() => {
      // Start animation with delay based on index for staggered effect
      Animated.parallel([
        Animated.timing(tileScale, {
          toValue: 1,
          duration: 400,
          delay: tileAnimDelay,
          useNativeDriver: true
        }),
        Animated.timing(tileOpacity, {
          toValue: 1,
          duration: 400,
          delay: tileAnimDelay,
          useNativeDriver: true
        })
      ]).start();
    }, []);
    
    return (
      <Animated.View
        style={{
          opacity: tileOpacity,
          transform: [{ scale: tileScale }]
        }}
      >
        <TouchableOpacity 
          style={styles.quickAccessTile}
          onPress={() => navigation.navigate(item.title)}
          activeOpacity={0.7}
        >
          <View style={[styles.iconContainer, { backgroundColor: item.color }]}>
            <Icon name={item.icon} size={26} color="white" />
          </View>
          <Text style={styles.tileTitle}>{item.title}</Text>
        </TouchableOpacity>
      </Animated.View>
    );
  };

  // Create animation values for news items - one for each news item
  const newsAnimValues = newsData.map(() => ({
    scale: useRef(new Animated.Value(0.9)).current,
    opacity: useRef(new Animated.Value(0)).current
  }));
  
  // Start news animations
  useEffect(() => {
    // Stagger the animations
    newsData.forEach((_, index: number) => {
      Animated.parallel([
        Animated.timing(newsAnimValues[index].opacity, {
          toValue: 1,
          duration: 500,
          delay: index * 100,
          useNativeDriver: true
        }),
        Animated.timing(newsAnimValues[index].scale, {
          toValue: 1,
          duration: 500,
          delay: index * 100,
          useNativeDriver: true
        })
      ]).start();
    });
  }, []);
  
  // Render news item with animation
  const renderNewsItem = ({ item, index }: { item: any, index: number }) => {
    const { scale, opacity } = newsAnimValues[index];
    
    return (
      <Animated.View 
        style={{
          opacity, 
          transform: [{ scale }],
          marginBottom: 16
        }}
      >
        <Card style={styles.newsCard}>
          <View style={styles.newsCardContent}>
            <Image
              source={{ uri: item.imageUrl }}
              style={styles.newsImage}
              resizeMode="cover"
            />
            <View style={styles.newsTextContainer}>
              <View>
                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 4 }}>
                  <Icon name="clock-outline" size={12} color={theme.colors.primary} style={{ marginRight: 4 }} />
                  <Text style={styles.newsDate}>{item.date}</Text>
                </View>
                <Title style={styles.newsTitle}>{item.title}</Title>
                <Paragraph style={styles.newsSnippet}>{item.snippet}</Paragraph>
              </View>
              <TouchableOpacity 
                style={styles.readMoreButton}
                onPress={() => navigation.navigate('NewsDetail', { newsId: item.id })}
                activeOpacity={0.7}
              >
                <Text style={styles.readMore}>Read More</Text>
                <Icon name="arrow-right" size={14} color={theme.colors.primary} style={{ marginLeft: 4 }} />
              </TouchableOpacity>
            </View>
          </View>
        </Card>
      </Animated.View>
    );
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar barStyle="dark-content" backgroundColor="transparent" translucent />
      <View style={styles.container}>
        <Animated.View
          style={[
            styles.header,
            {
              opacity: fadeAnim,
              transform: [{ translateY: scrollY.interpolate({
                inputRange: [0, 100],
                outputRange: [0, -10],
                extrapolate: 'clamp'
              }) }]
            }
          ]}
        >
          <View style={styles.headerContent}>
            <View>
              <Text style={styles.appBarTitle}>Hockey Tribe</Text>
              <Text style={styles.appBarSubtitle}>Welcome back, Player</Text>
            </View>
            <View style={styles.headerActions}>
              <TouchableOpacity style={styles.iconButton}>
                <Badge visible={true} size={8} style={{ position: 'absolute', top: 10, right: 10 }} />
                <Icon name="bell-outline" size={22} color="#333333" />
              </TouchableOpacity>
              <TouchableOpacity style={styles.iconButton}>
                <Icon name="account-circle-outline" size={22} color="#333333" />
              </TouchableOpacity>
            </View>
          </View>
        </Animated.View>

            transform: [{ translateY }],
            marginHorizontal: 16,
            marginTop: 16,
            marginBottom: 8
          }}>
            <Card style={styles.welcomeCard}>
              <LinearGradient
                colors={[theme.colors.primary, '#004999']}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 0 }}
                style={styles.welcomeGradient}
              >
                <View style={styles.welcomeContent}>
                  <View>
                    <Text style={styles.welcomeTitle}>Today's Match</Text>
                    <Text style={styles.welcomeSubtitle}>Maple Leafs vs Bruins</Text>
                    <Text style={styles.welcomeTime}>7:30 PM EST</Text>
                  </View>
                  <TouchableOpacity style={styles.welcomeButton}>
                    <Text style={styles.welcomeButtonText}>View Details</Text>
                  </TouchableOpacity>
                </View>
              </LinearGradient>
            </Card>
          </Animated.View>

          <Animated.View
            style={[
              styles.carouselContainer,
              {
                opacity: fadeAnim,
                transform: [{ translateY }]
              }
            ]}
          >
            <FlatList
              ref={flatListRef}
              data={carouselData}
              renderItem={renderCarouselItem}
              keyExtractor={item => item.id}
              horizontal
              pagingEnabled
              showsHorizontalScrollIndicator={false}
              onScroll={handleScroll}
              scrollEventThrottle={16}
            />

            <View style={styles.paginationContainer}>
              {carouselData.map((_, index) => {
                const inputRange = [
                  (index - 1) * width,
                  index * width,
                  (index + 1) * width
                ];

                const dotWidth = scrollX.interpolate({
                  inputRange,
                  outputRange: [8, 16, 8],
                  extrapolate: 'clamp'
                });

                const opacity = scrollX.interpolate({
                  inputRange,
                  outputRange: [0.3, 1, 0.3],
                  extrapolate: 'clamp'
                });

                return (
                  <Animated.View
                    key={index}
                    style={[styles.dot, { width: dotWidth, opacity }]}
                  />
                );
              })}
            </View>
          </Animated.View>

          <Animated.View
            style={[
              styles.sectionContainer,
              {
                opacity: fadeAnim,
                transform: [{ translateY }]
              }
            ]}
          >
            <View style={styles.sectionTitleContainer}>
              <Text style={styles.sectionTitle}>Quick Access</Text>
              <TouchableOpacity>
                <Text style={styles.seeAllText}>See All</Text>
              </TouchableOpacity>
            </View>
            <ScrollView
              horizontal
              showsHorizontalScrollIndicator={false}
              contentContainerStyle={{ paddingLeft: 16 }}
            >
              {quickAccessData.map((item, index) => renderQuickAccessTile({ item, index }))}
            </ScrollView>
          </Animated.View>

          <Animated.View
            style={[
              styles.newsSection,
              {
                opacity: fadeAnim,
                transform: [{ translateY }]
              }
            ]}
          >
            <View style={styles.sectionTitleContainer}>
              <Text style={styles.sectionTitle}>Latest News</Text>
              <TouchableOpacity>
                <Text style={styles.seeAllText}>See All</Text>
              </TouchableOpacity>
            </View>
            {newsData.map((item, index) => renderNewsItem({ item, index }))}
          </Animated.View>

          <Animated.View
            style={[
              styles.sectionContainer,
              {
                opacity: fadeAnim,
                transform: [{ translateY }],
                paddingBottom: 30
              }
            ]}
          >
            <View style={styles.sectionTitleContainer}>
              <Text style={styles.sectionTitle}>Upcoming Events</Text>
              <TouchableOpacity>
                <Text style={styles.seeAllText}>See All</Text>
              </TouchableOpacity>
            </View>
            <Card style={styles.eventCard}>
              <View style={styles.eventDateContainer}>
                <Text style={styles.eventMonth}>MAY</Text>
                <Text style={styles.eventDay}>15</Text>
              </View>
              <View style={styles.eventDetails}>
                <Text style={styles.eventTitle}>Youth Hockey Tournament</Text>
                <View style={styles.eventInfo}>
                  <Icon name="map-marker" size={14} color={theme.colors.primary} style={{ marginRight: 4 }} />
                  <Text style={styles.eventLocation}>City Arena, Downtown</Text>
                </View>
                <View style={styles.eventInfo}>
                  <Icon name="clock-outline" size={14} color={theme.colors.primary} style={{ marginRight: 4 }} />
                  <Text style={styles.eventTime}>9:00 AM - 4:00 PM</Text>
                </View>
                <Chip
                  style={styles.eventStatusChip}
                  textStyle={styles.eventStatusText}
                >
                  Registration Open
                </Chip>
              </View>
            </Card>
          </Animated.View>
        </Animated.ScrollView>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
  },
  container: {
    flex: 1,
    backgroundColor: '#F5F7FA',
  },
  header: {
    backgroundColor: '#FFFFFF',
    paddingTop: 10,
    paddingBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
    elevation: 0,
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  iconButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 12,
    backgroundColor: '#F5F5F5',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  appBarTitle: {
    fontWeight: 'bold',
    fontSize: 26,
    color: '#333333',
    letterSpacing: 0.5,
  },
  appBarSubtitle: {
    fontSize: 13,
    color: '#666666',
    letterSpacing: 0.2,
  },
  scrollView: {
    flex: 1,
  },
  welcomeCard: {
    borderRadius: 16,
    overflow: 'hidden',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  welcomeGradient: {
    padding: 20,
    borderRadius: 16,
  },
  welcomeContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  welcomeTitle: {
    color: 'white',
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  welcomeSubtitle: {
    color: 'white',
    fontSize: 16,
    marginBottom: 4,
    opacity: 0.9,
  },
  welcomeTime: {
    color: 'white',
    fontSize: 14,
    opacity: 0.8,
  },
  welcomeButton: {
    backgroundColor: 'rgba(255,255,255,0.2)',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 8,
  },
  welcomeButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 14,
  },
  carouselContainer: {
    height: 280,
    marginVertical: 16,
  },
  carouselItem: {
    width: Dimensions.get('window').width,
    justifyContent: 'center',
  },
  paginationContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 10,
    height: 20,
  },
  dot: {
    height: 8,
    borderRadius: 4,
    backgroundColor: '#0066CC', // Primary color
    marginHorizontal: 4,
  },
  carouselCard: {
    width: Dimensions.get('window').width - 32,
    marginHorizontal: 16,
    borderRadius: 16,
    overflow: 'hidden',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    backgroundColor: '#FFFFFF',
  },
  carouselImage: {
    height: 180,
    width: '100%',
  },
  carouselGradient: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    height: 160,
    justifyContent: 'flex-end',
  },
  carouselContent: {
    padding: 16,
    paddingBottom: 20,
  },
  carouselTitle: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
  },
  carouselSubtitle: {
    color: 'white',
    fontSize: 14,
    opacity: 0.9,
    marginBottom: 12,
  },
  carouselButton: {
    flexDirection: 'row',
    alignItems: 'center',
    alignSelf: 'flex-start',
    backgroundColor: 'rgba(255,255,255,0.2)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    marginTop: 8,
  },
  carouselButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  badge: {
    position: 'absolute',
    top: 12,
    left: 12,
    borderRadius: 6,
    paddingHorizontal: 10,
    paddingVertical: 3,
    zIndex: 10,
  },
  badgeText: {
    color: 'white',
    fontSize: 11,
    fontWeight: 'bold',
    letterSpacing: 0.5,
  },
  sectionContainer: {
    marginVertical: 16,
    paddingHorizontal: 16,
  },
  sectionTitleContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
    paddingHorizontal: 4,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#222222',
    letterSpacing: 0.3,
  },
  seeAllText: {
    color: '#0066CC', // Primary color
    fontSize: 14,
    fontWeight: '600',
  },
  newsSection: {
    paddingTop: 10,
    paddingHorizontal: 16,
    marginBottom: 20,
    paddingBottom: 10,
  },
  quickAccessTile: {
    alignItems: 'center',
    marginRight: 24,
    width: 80,
  },
  iconContainer: {
    width: 56,
    height: 56,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
  },
  tileTitle: {
    fontSize: 13,
    textAlign: 'center',
    color: '#333333',
    fontWeight: '500',
  },
  newsCard: {
    marginBottom: 16,
    borderRadius: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    backgroundColor: '#FFFFFF',
    marginHorizontal: 2,
  },
  newsCardContent: {
    flexDirection: 'row',
    padding: 16,
  },
  newsImage: {
    width: 80,
    height: 80,
    borderRadius: 10,
    marginRight: 16,
  },
  newsTextContainer: {
    flex: 1,
    justifyContent: 'space-between',
    paddingVertical: 4,
  },
  newsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#222222',
    lineHeight: 22,
    letterSpacing: 0.2,
  },
  newsDate: {
    fontSize: 12,
    color: '#666666',
    letterSpacing: 0.1,
  },
  newsSnippet: {
    fontSize: 14,
    marginBottom: 10,
    color: '#444444',
    lineHeight: 20,
    letterSpacing: 0.1,
  },
  readMore: {
    color: '#0066CC', // Primary color
    fontSize: 13,
    fontWeight: '600',
    letterSpacing: 0.2,
  },
  readMoreButton: {
    paddingVertical: 5,
    paddingHorizontal: 0,
    alignSelf: 'flex-start',
    flexDirection: 'row',
    alignItems: 'center',
  },
  eventCard: {
    borderRadius: 16,
    overflow: 'hidden',
    marginHorizontal: 2,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
  },
  eventDateContainer: {
    position: 'absolute',
    left: 16,
    top: 16,
    width: 50,
    backgroundColor: '#0066CC', // Primary color
    borderRadius: 8,
    alignItems: 'center',
    padding: 8,
  },
  eventMonth: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  eventDay: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  eventDetails: {
    padding: 16,
    paddingLeft: 80,
  },
  eventTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#222222',
  },
  eventInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 6,
  },
  eventLocation: {
    fontSize: 14,
    color: '#444444',
  },
  eventTime: {
    fontSize: 14,
    color: '#444444',
  },
  eventStatusChip: {
    marginTop: 8,
    backgroundColor: 'rgba(0, 102, 204, 0.1)',
    alignSelf: 'flex-start',
    height: 28,
  },
  eventStatusText: {
    color: '#0066CC', // Primary color
    fontSize: 12,
    fontWeight: '600',
  }
});

export default HomeScreen;
